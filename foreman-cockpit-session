#!/usr/bin/env ruby

require "json"
require "net/http"
require "net/ssh"

def dbg(str)
    $stderr.write(str + "\n")
end

# Cockpit protocol, encoding and decoding of control messages.

def send_control(msg)
  text = JSON.dump(msg)
  dbg("-> #{text}")
  $stdout.write("#{text.length+1}\n\n#{text}")
  $stdout.flush
end

def read_size(io)
  size = 0
  seen = 0

  while seen < 8
    t = io.readpartial(1)

    unless t
      return 0
    end

    if t == "\n"
      break
    end

    if t.to_i.zero? && t != "0"
      raise ArgumentError("Invalid frame: invalid size")
    end

    size = (size * 10) + t.to_i
    seen += 1
  end

  if seen == 8
    raise ArgumentError("Invalid frame: size too long")
  end

  size
end

def read_control()
  io = IO.for_fd(1)
  size = read_size(io)

  data = ""
  while size > 0
    d = io.readpartial(1)  # XXX - can't we just do readpartial(size)?
    size -= d.length
    data += d
  end

  dbg("<- #{data.strip}")
  JSON.parse(data)
end

# Specific control messages

def send_auth_challenge(challenge)
    send_control({
        "command" => "authorize",
        "cookie" => "1234", # must be present, but value doesn't matter
        "challenge" => challenge
    })
end

def send_auth_response(response)
    send_control({
        "command" => "authorize",
        "response" => response
    })
end

def read_auth_reply()
    cmd = read_control()
    response = cmd["response"]
    if cmd["command"] != "authorize" || !response
      raise ArgumentError("Did not receive a valid authorize command")
    end
    response
end

def exit_with_problem(problem, message, auth_methods)
    send_control({
        "command" => "init",
        "problem" => problem,
        "message" => message,
        "auth-method-results" => auth_methods
    })
    exit 1
end

# Talking to the Foreman API

def get_token_from_auth_data(auth_data)
  auth_data.split(" ")[1]
end

def api_call(path, token)
  dbg("=> #{path}")
  uri = URI('http://localhost:3000/api/v2/' + path)
  req = Net::HTTP::Get.new(uri)
  req["Cookie"] = "_session_id=#{token}"
  res = Net::HTTP.start(uri.hostname, uri.port) { |http| http.request(req) }
  dbg("<= #{res.code} #{res.body[0,500]}")
  if res.code == "200"
    return JSON.parse(res.body)
  elsif res.code == "401"
    exit_with_problem("authentication-failed",
                      "Token was not valid",
                      { "password": "not-tried", "token": "denied" })
  elsif res.code == "404"
    return nil
  else
    $stderr.write("Error talking to foreman: #{res.body}\n")
    exit 1
  end
end

# Direct SSH

def ssh_without_proxy(params)
  methods = %w(publickey)
  methods.unshift('password') if params["ssh_password"]

  ssh_options = { }
  ssh_options[:port] = params["ssh_port"] if params["ssh_port"]
  ssh_options[:keys] = [ params["ssh_key_file"] ] if params["ssh_key_file"]
  ssh_options[:password] = params["ssh_password"] if params["ssh_password"]
  ssh_options[:passphrase] = params[:ssh_key_passphrase] if params[:ssh_key_passphrase]
  # ssh_options[:user_known_hosts_file] = @known_hosts_file if @known_hosts_file
  ssh_options[:keys_only] = true
  # if the host public key is contained in the known_hosts_file,
  # verify it, otherwise, if missing, import it and continue
  ssh_options[:paranoid] = true
  ssh_options[:auth_methods] = methods
  # ssh_options[:user_known_hosts_file] = prepare_known_hosts if @host_public_key
  ssh_options[:number_of_password_prompts] = 1
  # ssh_options[:verbose] = settings[:ssh_log_level]
  # ssh_options[:logger] = ForemanRemoteExecutionCore::LogFilter.new(SmartProxyDynflowCore::Log.instance)

  started = false
  err_buf = ""
  begin
    Net::SSH.start(params["hostname"], params["ssh_user"], ssh_options) do |ssh|
      channel = ssh.open_channel do |ch|
        ch.exec(params["command"]) do |ch, success|
          exit_with_problem("access-denied", "Cockpit not installed", nil) unless success

          ssh.listen_to($stdin) do
            begin
              ch.send_data($stdin.readpartial(4096))
            rescue EOFError
              ch.close()
            end
          end

          ch.on_data do |ch2, data|
            # XXX - This might block since we don't select $stdout for writability.
            while data != ""
              n = $stdout.write(data)
              data = data[n..-1]
            end
            $stdout.flush()
          end

          ch.on_request('exit-status') do |ch, data|
            dbg("EX #{data.read_long}\n")
            ch.close
          end

          channel.on_request('exit-signal') do |ch, data|
            dbg("SIG #{data.read_string}\n")
            ch.close
          end

          ch.on_extended_data do |ch2, type, data|
            dbg("#{type}: #{data}\n")
            err_buf += data
          end
        end
      end

      channel.wait
      if not started
        exit_with_problem("access-denied", err_buf, nil)
      end
    end
  rescue Net::SSH::AuthenticationFailed => e
    exit_with_problem("access-denied", e.message, nil)
  end
end

# SSH via the smart proxy

def ssh_with_proxy(urlstr, params)
  url = URI(urlstr)
  sock = TCPSocket.open(url.hostname, url.port)

  data = JSON.dump(params) + "\n"
  inp_buf = "POST /remote_execution/ssh_session HTTP/1.1\nConnection: upgrade\nUpgrade: raw\nContent-Length: #{data.length}\n\n#{data}"
  out_buf = ""

  ws_eof = false
  bridge_eof = false
  expecting_http_header = true

  status = ""

  while true
    readers = [ ]
    writers = [ ]

    readers.append($stdin) unless ws_eof
    readers.append(sock) unless bridge_eof
    writers.append(sock) unless inp_buf == ""

    if out_buf.length > 0
      if expecting_http_header
        header_end = out_buf.index("\r\n\r\n")
        if header_end
          status_line, headers_text = out_buf[0, header_end].split("\r\n", 2)
          status = status_line.split(" ")[1]
          out_buf = out_buf[header_end+4..-1]
          expecting_http_header = false
          if status != "101"
            m = /^Content-Length:[ \t]*([0-9]+)\r?$/i.match(headers_text)
            if m
              expected_len = m[1].to_i
            else
              expected_len = -1
            end
            while expected_len < 0 || out_buf.length < expected_len
              begin
                out_buf += sock.readpartial(4096)
              rescue EOFError
                break
              end
            end
            if status == "401"
              exit_with_problem("authentication-failed", out_buf, nil)
            elsif status[0] == "4"
              exit_with_problem("access-denied", out_buf, nil)
            else
              $stderr.write("Error talking to smart proxy: #{out_buf}\n")
              exit 1
            end
          end
        end
      end
      writers.append($stdout) unless out_buf == ""
    end

    break if readers.length + writers.length == 0

    r, w, x = IO.select(readers, writers)

    if r.include?(sock)
      begin
        out_buf += sock.readpartial(4096)
      rescue EOFError
        bridge_eof = true
        break if out_buf == ""
      end
    end

    if w.include?(sock)
      n = sock.write(inp_buf)
      sock.flush()
      inp_buf = inp_buf[n..-1]
      if inp_buf == "" and ws_eof
        sock.close_write()
      end
    end

    if r.include?($stdin)
      begin
        inp_buf += $stdin.readpartial(4096)
      rescue EOFError
        ws_eof = true
        sock.close_write() if inp_buf == ""
      end
    end

    if w.include?($stdout)
      n = $stdout.write(out_buf)
      $stdout.flush()
      out_buf = out_buf[n..-1]
      break if out_buf == "" and bridge_eof
    end

  end
end

# Main

host = ARGV[0]

send_auth_challenge("*")
token = get_token_from_auth_data(read_auth_reply())
params = api_call("hosts/#{host}/ssh_params", token)

if !params
  exit_with_problem("access-denied", "Host with id #{host} is not known", nil)
end

params["command"] = "cockpit-bridge"
if params["proxy"] == "not_available"
  exit_with_problem("access-denied", "Required proxy not available", nil)
elsif !params["proxy"] || params["proxy"] == "not_defined"
  ssh_without_proxy(params)
else
  ssh_with_proxy(params["proxy"], params)
end
